<?php
namespace framework\tests\cache;

use framework\cache\RedisCache;
use Mockery as m;
use PHPUnit\Framework\TestCase;
use Predis\Client;

class CacheRedisCacheTest extends TestCase
{
    /*@var $redis m */
    private $redis;
    private $redisCache;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->redis = m::mock(Client::class);
        $this->redisCache = new RedisCache($this->redis);
    }

    public function testGet(): void
    {
        $this->redis->shouldReceive('get')->with('name')->andReturn('tom');
        $this->assertEquals('tom', $this->redisCache->get('name'));
    }

    public function testSetWithExpire(): void
    {
        $this->redis->shouldReceive('set')->with('name', 'tom', 'ex', 6)->andReturnTrue();
        $ret = $this->redisCache->set('name', 'tom', 6);
        $this->assertTrue($ret);
        $this->redis->shouldReceive('set')->with('name', 'tom')->andReturnTrue();
        $ret2 = $this->redisCache->set('name', 'tom');
        $this->assertTrue($ret2);
    }

    public function testDel(): void
    {
        $this->redis->shouldReceive('del')->with('name')->andReturnTrue();
        $ret = $this->redisCache->del('name');
        $this->assertTrue($ret);
    }

    public function testRemember(): void
    {
        $this->redis->shouldReceive('get')->withAnyArgs()->andReturnNull();
        $this->redis->shouldReceive('set')->with('name', 'rose', 'ex', 6)->andReturnTrue();
        $callback = function () {
            return 'rose';
        };
        $ret = $this->redisCache->remember('name', 6, $callback);
        $this->assertEquals('rose', $ret);
    }
}
